from bs4 import BeautifulSoup, Tag

from .errors import (
    EmptyHtmlProvidedForParsing,
    InvalidAttributeProvided,
    InvalidContentProvided,
    InvalidHtmlProvidedForParsing,
    InvalidTagProvided,
    NoFirstTagFound,
    TagNotFoundInHTML,
)


class HTMLParserTools:
    def __init__(self, text: str = None):
        """
        Args:
            text (str, optional): HTML text. Defaults to None.

        Raises:
            EmptyHtmlProvidedForParsing: When empty string is provided.
            InvalidHtmlProvidedForParsing: When it fails to parse the HTML.
        """
        if text is None or text == "":
            raise EmptyHtmlProvidedForParsing

        try:
            self.tree = BeautifulSoup(text, "html.parser")
        except Exception as e:
            print(f"Unexpected exception found while parsing HTML: {e}")
            raise InvalidHtmlProvidedForParsing

    @staticmethod
    def exists_attribute_in_tag(tag: Tag, attribute: str) -> bool:
        """Return True if the attribute exists in the tag.

        Args:
            tag (Tag): When the tag is None or is not HTML tag.
            attribute (str): Name of the attribute to check

        Raises:
            InvalidTagProvided: If the
            InvalidAttributeProvided: If the attribute is empty or None

        Returns:
            bool: True if the attribute exists in the tag. False otherwise.
        """
        if tag is None or type(tag) is not Tag:
            raise InvalidTagProvided

        if attribute is None or attribute == "":
            raise InvalidAttributeProvided

        return attribute in tag.attrs

    @staticmethod
    def get_attributes_from_tag(tag: Tag, attribute: str) -> str:
        """Get an attribute form a tag.

        Args:
            tag (Tag): Tag from the HTML tree, where the attribute is present.
            attribute (str): Name of the attribute to get.

        Raises:
            InvalidTagProvided: When the tag is None or is not HTML tag.
            InvalidAttributeProvided: If the attribute is empty or None or it is not found in the tag.

        Returns:
            str: content of the attribute.
        """
        if tag is None or type(tag) is not Tag:
            raise InvalidTagProvided

        if attribute is None or attribute == "":
            raise InvalidAttributeProvided

        try:
            return tag[attribute]
        except KeyError:
            raise InvalidAttributeProvided

    def find_first_tag(self) -> Tag:
        """Find the first tag in the HTML tree.

        Args:
            html_tree (BeautifulSoup): HTML tree generated by BeautifulSoup.

        Raises:
            NoFirstTagFound: If no first tag is found

        Returns:
            Tag: The first tag found in the HTML tree.
        """
        for c in self.tree.children:
            if type(c) is Tag:
                return c
        raise NoFirstTagFound

    def add_attribute_to_tag(self, tag: Tag, attribute: str, value: str) -> None:
        """Find the tag in the HTML and return the add and attribute to it.

        Args:
            tag (Tag): Tag from the HTML tree
            attribute (str): Name of the attribute to add
            value (str): Given value to the attribute

        Raises:
            InvalidAttributeProvided: When the attribute is empty or None
            InvalidContentProvided: When the value is None. Empty string is allowed.
        """
        if attribute is None or attribute == "":
            raise InvalidAttributeProvided

        if value is None:
            raise InvalidContentProvided

        tag = self.__found_tag_in_tree(tag)
        tag[attribute] = value

    def __found_tag_in_tree(self, tag: Tag) -> Tag:
        """Find the tag in the HTML tree.

        Args:
            tag (Tag): Tag from the HTML tree

        Raises:
            TagNotFoundInHTML: If the tag is not found

        Returns:
            Tag: The tag found in the current HTML tree.
        """
        for c in self.tree.children:
            if c == tag:
                return c
        raise TagNotFoundInHTML

    def get_html(self) -> str:
        """Return the HTML tree as a string.

        Returns:
            str: HTML tree as a string.
        """
        return str(self.tree)

    def get_text_from_html(self) -> str:
        """Get the visible text from the HTML.

        Returns:
            str: Visible text splitted by two break lines.
        """
        text = self.tree.find_all(string=True)
        return "\n\n".join(text)
