from .converter import MarkdownToHTMLConverter
from .extractor.extractor import MarkdownFromHTMLExtractor
from .ingestor.ingestor import MarkdownIntoHTMLIngestor
from .tools.html import HTMLParserTools
from .tools.html.errors import NoFirstTagFound


class MarkdownToggler:
    def __is_converted_html(self, text: str) -> bool:
        """Check if md_content tag exists to consider the text as HTML.

        Args:
            text (str): Markdown or HTML code to be checked.

        Returns:
            bool: The text is a HTML generated by this tool
        """
        try:
            first_tag = HTMLParserTools(text).find_first_tag()
        except NoFirstTagFound:
            return False

        return HTMLParserTools.exists_attribute_in_tag(first_tag, "md_content")

    def run(self, text: str) -> str:
        """
        Toggle between markdown and HTML. If the text is markdown, it will be converted
        into HTML with the markdown encoded in the md_content attribute of the first HTML tag.
        It the text is HTML, it will be converted into markdown by extracting the markdown
        from the md_content attribute of the first HTML tag.

        If no md_content tag is provided, the text will be always considered as markdown, since
        markdown can have HTML tags inside.

        Args:
            text (str): Markdown or HTML code to be toggled.

        Returns:
            str: Markdown or HTML code toggled.
        """
        if self.__is_converted_html(text):
            return MarkdownFromHTMLExtractor().run(text)
        else:
            cleaned_html = HTMLParserTools(text).get_text_from_html()
            html = MarkdownToHTMLConverter().run(cleaned_html)
            return MarkdownIntoHTMLIngestor().run(html, text)
