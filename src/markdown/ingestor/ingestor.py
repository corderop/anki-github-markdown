import base64

from bs4 import BeautifulSoup, Tag

from markdown.ingestor.errors import EmptyHTMLProvided, InvalidHTMLProvided


class MarkdownIntoHTMLIngestor:
    def __find_first_tag_in_html_tree(self, html_tree: BeautifulSoup) -> Tag:
        """Find the first tag in the HTML tree.

        Args:
            html_tree (BeautifulSoup): HTML tree generated by BeautifulSoup.

        Raises:
            InvalidHTMLProvided: If no first tag is found

        Returns:
            Tag: The first tag found in the HTML tree.
        """
        for c in html_tree.children:
            if type(c) is Tag:
                return c
        raise InvalidHTMLProvided

    def run(self, html: str, markdown: str) -> str:
        """Add the base64 encoded markdown in an attribute
        called md_content inside the first tag of the HTML provided.

        Args:
            html (str): HTML code in which to include the markdown.
            markdown (str): Markdown code to be included in the HTML.

        Raises:
            EmptyHTMLProvided: If empty or None HTML is provided.
            InvalidHTMLProvided: If the HTML provided has no tags or is invalid.

        Returns:
            str: HTML code with the markdown included in the first tag.
        """
        if not html:
            raise EmptyHTMLProvided

        html_tree = BeautifulSoup(html, "html.parser")
        first_tag = self.__find_first_tag_in_html_tree(html_tree)

        encoded_markdown = base64.b64encode(markdown.encode("utf-8")).decode()
        first_tag["md_content"] = encoded_markdown

        return str(html_tree)
